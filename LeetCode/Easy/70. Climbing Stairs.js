//link:https://leetcode.com/problems/climbing-stairs/description/
/**
 * @param {number} n
 * @return {number}
 */

/**
 * 思路,每次都只能走一步到两步
 * 如果n<=1,那么答案只有一个 就是返回1
 * 如果n>1,那么对于当前台阶i来说,要到达台阶,那么就是i-1台阶往上走一步或者i-2台阶走两步.
 * 1 2 3 前三个台阶所需要的步数
 * n=4,第4台阶来说,要到达它的位置,只有第2步走两步,和第3步走一步,
 * 这时 去到第2步的方法有两种,去到第3步的方法有三种,
 * 这时 去到第4步的方法就有5种了,
 * 这时 即目标的大问题,被细分到两个小问题的身上,即到第2步要多少种方法,到第3步有多少种方法,
 * 到达台阶i的方法数=达台阶i-1的方法数+达台阶i-2的方法数
 * 所以这时一个递推的问题,用到斐波那契算法
 * */

var climbStairs = function(n) {
  let res = [];
  (res[0] = 1), (res[1] = 1);
  for (let i = 2; i <= n; i++) {
    // 到达台阶i的方法数=达台阶i-1的方法数+达台阶i-2的方法数
    res[i] = res[i - 1] + res[i - 2];
  }
  return res[n];
};
